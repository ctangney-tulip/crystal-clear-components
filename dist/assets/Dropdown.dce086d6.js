var l=Object.defineProperty;var c=(r,e,t)=>e in r?l(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var a=(r,e,t)=>(c(r,typeof e!="symbol"?e+"":e,t),t);import{b as n,a as i}from"./dom-helpers.e766f3bc.js";class p extends HTMLElement{constructor(){super();a(this,"template",`
    <details class="cc-dropdown">
      <summary class="dropdown-label"><slot name="label"></slot></summary>
    </details>
  `);this.render()}clone(){const t=this.querySelectorAll("[slot]"),o=Array.from(this.children).filter(s=>!s.getAttribute("slot"));this.innerHTML=this.template,t.forEach(s=>{if(s.getAttribute("slot").toLowerCase()==="label"&&n(s,"span")===!1)throw new Error('Slot `<slot="label">` must be a SPAN element.');this.querySelector(`slot[name="${s.getAttribute("slot")}"]`).replaceWith(s)}),o.forEach(s=>{this.querySelector(":scope > details").appendChild(s)})}render(){this.clone()}connectedCallback(){const t=this.classList.contains("cc-load")?this:this.closest(".cc-load");try{!t.getAttribute("data-rendered")&&t.setAttribute("data-rendered","true"),i(this)&&!t.getAttribute("data-opaque")&&t.setAttribute("data-opaque","true")}catch(o){throw console.error(o),new Error}}}export{p as default};
